" Use <leader>l to toggle display of whitespace
nmap <leader>l :set list!<CR>
" automatically change window's cwd to file's dir
 set autochdir

" I'm prefer spaces to tabs
filetype indent on
set smartindent
set filetype=html
set tabstop=4
set shiftwidth=4
set expandtab

" more subtle popup colors 
if has ('gui_running')
	highlight Pmenu guibg=#cccccc gui=bold    
endif

augroup vimrc_autocmds
	autocmd!
	" highlight characters past column 120
	autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
	autocmd FileType python match Excess /\%120v.*/
	autocmd FileType python set nowrap
augroup END

call plug#begin('~/.vim/plugged')

" A tree explorer plugin for Vim.
Plug 'scrooloose/nerdtree'
" Press F2 in vim and it will take you to the current working directory.
" Press ? to see NerdTree’s list of commands.
map <F2> :NERDTreeToggle<CR>

" With this plugin, your vim comes to automatically opens popup menu for
" completions when you enter characters or move the cursor in Insert mode.
Plug 'vim-scripts/AutoComplPop'

" lean & mean status/tabline for vim that's light as air
Plug 'bling/vim-airline'
let &t_Co=256
" airline设置
set laststatus=2
" 使用powerline打过补丁的字体
let g:airline_powerline_fonts = 1
" 开启tabline
let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' '
" tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|'
" tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1
" 映射切换buffer的键位
nnoremap [b :bp<CR>
nnoremap ]b :bn<CR>

" fugitive.vim: a Git wrapper so awesome
Plug 'tpope/vim-fugitive'

" Vim python-mode. PyLint, Rope, Pydoc, breakpoints from box.
Plug 'klen/python-mode'
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

" Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_bind = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" jedi-vim - awesome Python autocompletion with VIM
Plug 'davidhalter/jedi-vim'

" Perl IDE -- Write and run Perl-scripts using menus and hotkeys.
Plug 'vim-scripts/perl-support.vim'

" Perldoc plugin for vim(Need to install perl-doc package)
Plug 'hotchpotch/perldoc-vim'

" Vim/Ruby Configuration Files
Plug 'vim-ruby/vim-ruby'
" Completion of Ruby code requires that Vim be built with +ruby.
" The completions provided by CTRL-X CTRL-O are sensitive to the context
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_load_gemfile = 1
let g:rubycomplete_gemfile_path = 'Gemfile.aux'
let g:rubycomplete_use_bundler = 1

call plug#end()
